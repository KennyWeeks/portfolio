$offWhite: #f2f2f2;
$offBlack: #1e1919;

//Defining breakpoints here in the code
$mobile: 499px;
$tabletMin: 500px;
$tabletMax: 1049px;
$laptopMin: 1050px;
$laptopMax: 1599px;
$desktopMin: 1600px;

$text-block-border-radius: 10px;
$font-family: "Arial";

//These are the two phone breakpoints
@mixin phoneVert {
    @media only screen and (max-width:$mobile) {
        @content;
    }
}

@mixin phoneHoriz {
    @media only screen and (max-height:$mobile) {
        @content;
    }
}

//This will be the main tablet breakpoint
@mixin tablet {
    @media only screen and (max-width:$tabletMax) and (min-width:$tabletMin) {
        @content;
    }
}

@mixin tabletPhone {
    @media only screen and (max-width:$tabletMax) and (min-width:$tabletMin) and (max-height:$mobile) {
        @content;
    }
}

@mixin tabletLarge {
    @media only screen and (max-width:$tabletMax) and (min-width:$tabletMin) and (min-height:$mobile) {
        @content;
    }
}

@mixin laptop {
    @media only screen and (min-width:$laptopMin) and (max-width:$laptopMax) 
    {
        @content;
    }
}

@mixin desktop {
    @media only screen and (min-width:$desktopMin) {
        @content;
    }
}

@mixin desktopFullScreen {
    @media only screen and (min-width:$desktopMin) and (min-height:$tabletMin) {
        @content;
    }
}

@mixin desktopSmallScreen  {
    @media only screen and (min-width:$desktopMin) and (max-height: $mobile) {
        @content;
    }
}

@mixin userDef($width) {
    @media only screen and (max-width:$width) {
        @content;
    }
}

@function findNumber($value) {
    $numbers: ("0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9);
    $result: 0;
    @for $i from 1 through str-length($value) {
        $digit: str-slice($value, $i, $i);
        $result: $result * 10 + map-get($numbers, $digit);
    }

    @return $result;
}

@function minOrMax($string) {
    @if str-slice($string, 1, 1) == "<" {
        $sep : findNumber(str-slice($string, 2, -3));
        @debug "max-width #{$sep - 1}";
        @return "max-width:" + ($sep - 1) + "px";
    } @else {
        $sep : str-slice($string, 2);
        @debug "min-width #{$sep}";
        @return "min-width:" + $sep;
    }
}

@mixin randomTest($list) {
    $sep : "";

    @if length($list) == 2 {
        @media only screen and (minOrMax(nth($list, 1))) and (minOrMax(nth($list, 2))) {
            @content;
        }
    } @else {
        @media only screen and (minOrMax(nth($list, 1))) {
            @content;
        }
    }
}

@mixin flexRow {
    display:flex;
    justify-content:space-between;
    flex-flow:row nowrap;
} 

@mixin flexCol {
    display:flex;
    justify-content:space-between;
    flex-direction:column;
}

@mixin flexCenter {
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
}